{% set cap_name = name|capitalize %}

// #TODO_dontcommit: add copyright everywhere (to file template also)
#pragma once

// #TODO_dontcommit: unreal types should be in a separate plugin I think. Others could just be in a third-party project

// #TODO_dontcommit: dimensions must be blueprint editable

#include "SetSelectedUnitStrategy.h"
#include "SafeMath/Quantity/Quantity.h"
#include "SafeMath/Quantity/Unit.h"

#include <variant>

#include "{{ cap_name }}.generated.h"

UENUM()
enum class E{{ cap_name }}Unit : uint8
{
    {% for unit in units %}
    {{ unit.name|capitalize }} UMETA(DisplayName="{{ unit.suffix }}"),
    {% endfor %}
};

template <class {{ cap_name }}Unit>
struct F{{ cap_name }}UnitTraits;

{% for unit in units %}
template <>
struct F{{ cap_name }}UnitTraits<SafeMath::Units::F{{ unit.name|capitalize }}>
{
	constexpr static E{{ cap_name }}Unit {{ cap_name }}Unit = E{{ cap_name }}Unit::{{ unit.name|capitalize }};

	inline static const TCHAR* Suffix = TEXT("{{ unit.suffix }}");
};
{% endfor %}

using F{{ cap_name }}Unit = std::variant<
{% for unit in units %}
    SafeMath::Units::F{{ unit.name|capitalize }}{% if not loop.last %},{% endif %}
{% endfor %}
>;

constexpr F{{ cap_name }}Unit GetUnitVariant(const E{{ cap_name }}Unit {{ cap_name }}Unit)
{
	switch ({{ cap_name }}Unit)
	{
{% for unit in units %}
        case E{{ cap_name }}Unit::{{ unit.name|capitalize }}:
			return F{{ cap_name }}Unit{ SafeMath::Units::F{{ unit.name|capitalize }}{} };
{% endfor %}
        default:
            return F{{ cap_name }}Unit{ SafeMath::Units::F{{ default_unit_type|capitalize }}{} };
	}
}

USTRUCT()
struct F{{ cap_name }} 
{
	GENERATED_BODY()

	using DefaultUnitType = SafeMath::Units::F{{ default_unit_type|capitalize }};

    using NumericType = double;

	using QuantityType = SafeMath::TQuantity<DefaultUnitType, NumericType>;

	using UnitEnumType = E{{ cap_name }}Unit;

	static FName GetValuePropertyName()
	{
		return GET_MEMBER_NAME_CHECKED(F{{ cap_name }}, Value);
	}

	static FName GetSelectedUnitPropertyName()
	{
		return GET_MEMBER_NAME_CHECKED(F{{ cap_name }}, SelectedUnit);
	}

	F{{ cap_name }}() = default;

	template <class CompatibleUnitType>
	F{{ cap_name }}(SafeMath::TQuantity<CompatibleUnitType, NumericType> Quantity)
		: Value(Quantity.template GetValue<DefaultUnitType>())
#if WITH_EDITORONLY_DATA
		, SelectedUnit(F{{ cap_name }}UnitTraits<CompatibleUnitType>::{{ cap_name }}Unit)
#endif
	{
		static_assert(SafeMath::IsSameDimension(DefaultUnitType{}, CompatibleUnitType{}));
	}

	operator QuantityType() const
	{
		return GetQuantity();
	}

	QuantityType GetQuantity() const
	{
		return QuantityType{DefaultUnitType{}, Value};
	}

    template <class UnitType>
    NumericType GetValue() const
    {
        return GetQuantity().GetValue<UnitType>();
    }

#if WITH_EDITORONLY_DATA
	E{{ cap_name }}Unit GetSelectedUnit() const
	{
		return SelectedUnit;
	}

	void SetSelectedUnit(E{{ cap_name }}Unit InSelectedUnit, ESetSelectedUnitStrategy SetSelectedUnitStrategy)
	{
		if (SetSelectedUnitStrategy == ESetSelectedUnitStrategy::KeepNumericalValue)
		{
			const auto FromUnitVariant = GetUnitVariant(SelectedUnit);
			const auto ToUnitVariant = GetUnitVariant(InSelectedUnit);

			std::visit(
				[this](auto FromUnit, auto ToUnit)
				{ Value = SafeMath::GetConversionRateBetween(ToUnit, FromUnit) * Value; },
				FromUnitVariant,
				ToUnitVariant);
		}

		SelectedUnit = InSelectedUnit;
	}
#endif

	F{{ cap_name }}& operator*=(const NumericType Scalar)
	{
		Value *= Scalar;
		return *this;
	}

	F{{ cap_name }}& operator/=(const NumericType Scalar)
	{
		Value /= Scalar;
		return *this;
	}

private:
	// Always internally stored in default dimension unit (conversion rate == 1)
	UPROPERTY(EditAnywhere)
	double Value = 0.;

#if WITH_EDITORONLY_DATA
	UPROPERTY(EditAnywhere)
	E{{ cap_name }}Unit SelectedUnit = F{{ cap_name }}UnitTraits<DefaultUnitType>::{{ cap_name }}Unit;
#endif
};

inline F{{ cap_name }} operator*(const F{{ cap_name }} {{ cap_name }}, const double Scalar)
{
	return F{{ cap_name }}{ {{ cap_name }} } *= Scalar;
}

inline F{{ cap_name }} operator*(const double Scalar, const F{{ cap_name }} {{ cap_name }})
{
	return {{ cap_name }} * Scalar;
}

inline F{{ cap_name }} operator/(const F{{ cap_name }} {{ cap_name }}, const double Scalar)
{
	return F{{ cap_name }}{ {{ cap_name }} } /= Scalar;
}

inline F{{ cap_name }} operator/(const double Scalar, const F{{ cap_name }} {{ cap_name }})
{
	return {{ cap_name }} / Scalar;
}
